#!/usr/bin/env python3
import gi, os, json, zipfile, socket
gi.require_version("Gtk", "3.0")
from gi.repository import Gtk, GdkPixbuf

SOCK = "/var/run/garmored.sock"

def send_request(request):
    with socket.socket(socket.AF_UNIX, socket.SOCK_STREAM) as client:
        client.connect(SOCK)
        client.send(json.dumps(request).encode())
        resp = client.recv(4096)
        return json.loads(resp.decode())

class GarmorRunner(Gtk.Window):
    def __init__(self):
        Gtk.Window.__init__(self, title="Garmor Runner")
        self.set_border_width(10)
        self.set_default_size(300, 200)

        self.box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=10)
        self.add(self.box)

        self.logo = Gtk.Image()
        self.label = Gtk.Label(label="Drop .garm file below")
        self.file_button = Gtk.FileChooserButton("Select a .garm", Gtk.FileChooserAction.OPEN)
        self.file_button.connect("file-set", self.file_selected)

        self.launch_btn = Gtk.Button(label="Launch App")
        self.launch_btn.connect("clicked", self.launch_app)
        self.launch_btn.set_sensitive(False)

        self.box.pack_start(self.logo, False, False, 0)
        self.box.pack_start(self.label, False, False, 0)
        self.box.pack_start(self.file_button, False, False, 0)
        self.box.pack_start(self.launch_btn, False, False, 0)

        self.garm_path = None

    def file_selected(self, widget):
        path = widget.get_filename()
        if path.endswith(".garm"):
            self.garm_path = path
            self.launch_btn.set_sensitive(True)
            self.load_logo(path)

    def load_logo(self, path):
        with zipfile.ZipFile(path, "r") as zipf:
            if "logo.png" in zipf.namelist():
                zipf.extract("logo.png", "/tmp")
                pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale("/tmp/logo.png", 64, 64, True)
                self.logo.set_from_pixbuf(pixbuf)
            else:
                self.logo.clear()

    def launch_app(self, widget):
        if self.garm_path:
            resp = send_request({"action": "launch", "path": self.garm_path})
            dialog = Gtk.MessageDialog(
                transient_for=self,
                flags=0,
                message_type=Gtk.MessageType.INFO if resp["status"] == "ok" else Gtk.MessageType.ERROR,
                buttons=Gtk.ButtonsType.OK,
                text=resp["msg"],
            )
            dialog.run()
            dialog.destroy()

win = GarmorRunner()
win.connect("destroy", Gtk.main_quit)
win.show_all()
Gtk.main()
